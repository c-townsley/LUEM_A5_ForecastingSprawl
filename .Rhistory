axis.title.y = element_text(size = 10),
# Set the entire chart region to blank
panel.background=element_blank(),
plot.background=element_blank(),
#panel.border=element_rect(colour="#F0F0F0"),
# Format the grid
panel.grid.major=element_line(colour="#D0D0D0",size=.75),
axis.ticks=element_blank())
mapTheme <- theme(plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_line(colour = 'transparent'),
panel.grid.minor=element_blank(),
legend.direction = "vertical",
legend.position = "right",
plot.margin = margin(1, 1, 1, 1, 'cm'),
legend.key.height = unit(1, "cm"), legend.key.width = unit(0.2, "cm"))
palette2 <- c("#41b6c4","#253494")
palette4 <- c("#a1dab4","#41b6c4","#2c7fb8","#253494")
palette5 <- c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494")
palette10 <- c("#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4",
"#4eb3d3","#2b8cbe","#0868ac","#084081","#f7fcf0")
#plot MSA boundary to make sure its right
ggplot(AtlantaMSA_fishnet) +
geom_sf() +
labs(title = "Atlanta MSA Fishnet") +
mapTheme
ggplot()+
geom_sf(AtlantaMSA_fishnet,
fill = "lightgrey") +
geom_sf(data = metro_boundary,
color = "black", fill = "transparent") +
mapTheme
ggplot()+
geom_sf(data = AtlantaMSA_fishnet,
fill = "lightgrey") +
geom_sf(data = metro_boundary,
color = "black", fill = "transparent") +
mapTheme
ggplot()+
geom_sf(data = AtlantaMSA_fishnet,
fill = "lightgrey") +
geom_sf(data = metro_boundary,
color = "black", fill = "transparent") +
labs(title = "Atlanta MSA Fishnet") +
mapTheme
AtlantaMSA_fishnet <-
st_make_grid(metro_boundary, cellsize = 2000, square = FALSE) %>%
st_sf()
#plot MSA boundary to make sure its right
ggplot()+
geom_sf(data = AtlantaMSA_fishnet,
fill = "lightgrey") +
geom_sf(data = metro_boundary,
color = "black", fill = "transparent") +
labs(title = "Atlanta MSA Fishnet") +
mapTheme
AtlantaMSA_fishnet <-
AtlantaMSA_fishnet[metro_boundary,]
#plot MSA boundary to make sure its right
ggplot()+
geom_sf(data = AtlantaMSA_fishnet,
fill = "lightgrey") +
geom_sf(data = metro_boundary,
color = "black", fill = "transparent") +
labs(title = "Atlanta MSA Fishnet") +
mapTheme
# Look here for variable codes
acs_vars <- load_variables(2009, "acs5")
View(acs_vars)
#First pull all MSAs in the U.S., then search for yours and filter with the correct CBSAFP code
metro_counties <- counties(state = "GA", cb = TRUE, resolution = "500k", year = NULL)
View(metro_counties)
#List of the Atlanta region MPOs 21 counties
Counties <- c("Barrow", "Bartow", "Carroll", "Cherokee",
"Clayton", "Cobb", "Coweta", "Dawson",
"DeKalb", "Douglas", "Fayette", "Forsyth",
"Fulton", "Gwinnett", "Hall", "Henry",
"Newton", "Paulding", "Rockdale", "Spalding", "Walton")
#First pull all MSAs in the U.S., then search for yours and filter with the correct CBSAFP code
metro_counties <- counties(state = "GA", cb = TRUE, resolution = "500k", year = NULL) %>%
filter(case_when(NAME == Counties))
#First pull all MSAs in the U.S., then search for yours and filter with the correct CBSAFP code
metro_counties <- counties(state = "GA", cb = TRUE, resolution = "500k", year = NULL) %>%
filter(NAME == Counties)
View(metro_counties)
#First pull all MSAs in the U.S., then search for yours and filter with the correct CBSAFP code
metro_counties <- counties(state = "GA", cb = TRUE, resolution = "500k", year = NULL) %>%
filter(NAME == "Barrow" | "Bartow" | "Carroll" | "Cherokee" |
"Clayton" | "Cobb" | "Coweta" | "Dawson" |
"DeKalb" | "Douglas" | "Fayette" | "Forsyth" |
"Fulton" | "Gwinnett" | "Hall" | "Henry" |
"Newton" | "Paulding" | "Rockdale" | "Spalding" | "Walton")
View(metro_counties)
metro_counties <- counties(state = "GA", cb = TRUE, resolution = "500k", year = NULL) %>%
filter(NAME = Counties)
metro_counties <- counties(state = "GA", cb = TRUE, resolution = "500k", year = NULL) %>%
filter(NAME == Counties)
NULL
#First pull all MSAs in the U.S., then search for yours and filter with the correct CBSAFP code
metro_counties <- counties(state = "GA", cb = TRUE, resolution = "500k", year = NULL)
metro_counties <- counties(state = "GA", cb = TRUE, resolution = "500k", year = NULL) %>%
filter(NAME == Counties)
#First pull all MSAs in the U.S., then search for yours and filter with the correct CBSAFP code
metro_counties <- counties(state = "GA", cb = TRUE, resolution = "500k", year = NULL)
metro_counties <- counties(state = "GA", cb = TRUE, resolution = "500k", year = NULL) %>%
filter(NAME %in% Counties)
rm(metro_counties)
#First pull all MSAs in the U.S., then search for yours and filter with the correct CBSAFP code
metro_counties <- counties(state = "GA", cb = TRUE, resolution = "500k", year = NULL) %>%
filter(NAME %in% Counties) %>%
filter(CBSAFP == "12060") %>%
st_transform("ESRI:102267")
#First pull all MSAs in the U.S., then search for yours and filter with the correct CBSAFP code
metro_counties <- counties(state = "GA", cb = TRUE, resolution = "500k", year = NULL) %>%
filter(NAME %in% Counties) %>%
st_transform("ESRI:102267")
#plot MSA boundary to make sure its right
ggplot(metro_counties) +
geom_sf() +
theme_bw() +
labs(title = "TIGER/Line")
#plot MSA boundary to make sure its right
ggplot(metro_counties) +
geom_sf() +
theme_bw() +
labs(title = "Atlanta 21 County MSA")
#Convert shapefile to geojson so can store on github
st_write(metro_counties, append = FALSE, "C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN 675_Land Modeling/Assignments/A5_SprawlForecasting/LUEM_A5_Repo/Data/geojson/Atlanta_Metro_Boundary.geojson")
#Convert shapefile to geojson so can store on github
st_write(metro_counties, append = FALSE, "C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN 675_Land Modeling/Assignments/A5_SprawlForecasting/LUEM_A5_Repo/Data/geojson/Atlanta_Metro_Counties.geojson")
st_write(metro_counties, append = FALSE, "C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN 675_Land Modeling/Assignments/A5_SprawlForecasting/LUEM_A5_Repo/Data/shapefile/Atlanta_Metro_Boundary/Atlanta_Metro_Counties.shp")
AtlantaMSA_fishnet <-
st_make_grid(metro_counties, cellsize = 2000, square = FALSE) %>%
st_sf()
AtlantaMSA_fishnet <-
AtlantaMSA_fishnet[metro_counties,]
#plot MSA boundary to make sure its right
ggplot()+
geom_sf(data = AtlantaMSA_fishnet,
fill = "lightgrey") +
geom_sf(data = metro_counties,
color = "black", fill = "transparent") +
labs(title = "Atlanta MSA Fishnet") +
mapTheme
View(metro_counties)
AtlantaPop09 <-
get_acs(geography = "tract", variables = "B01003_001", year = 2009,
state = 13, geometry = TRUE,
county = Counties)
View(AtlantaPop09)
#Pull 2009 population
AtlantaPop09 <-
get_acs(geography = "tract", variables = "B01003_001", year = 2009,
state = 13, geometry = TRUE,
county = Counties) %>%
st_transform(st_crs(AtlantaMSA_fishnet))
rm(AtlantaPop09)
# Look here for variable codes
acs_vars <- load_variables(2009, "acs5")
#Pull 2009 population
Pop09 <-
get_acs(geography = "tract", variables = "B01003_001", year = 2009,
state = 13, geometry = TRUE,
county = Counties) %>%
st_transform(st_crs(AtlantaMSA_fishnet))
#Pull 2019 population
Pop19 <-
get_acs(geography = "tract", variables = "B01003_001", year = 2019,
state = 13, geometry = TRUE,
county = Counties) %>%
st_transform(st_crs(AtlantaMSA_fishnet)) %>%
st_buffer(-1) #buffer the the tracts by -1ft. This is done because tidycensus appears to return geometries that are problematic when subjected to the area weighted interpolation function
View(Pop19)
glimpse(Pop09)
grid.arrange(
ggplot() +
geom_sf(data = Pop09, aes(fill=factor(ntile(estimate,5))), colour=NA) +
scale_fill_manual(values = palette5,
labels=quintileBreaks(Pop09,"pop_2009"),
name="Quintile\nBreaks") +
labs(title="Population, Atlanta 21-County MSA: 2009") +
mapTheme,
ggplot() +
geom_sf(data = Pop19, aes(fill=factor(ntile(estimate,5))), colour=NA) +
scale_fill_manual(values = palette5,
labels=quintileBreaks(Pop19,"pop_2019"),
name="Quintile\nBreaks") +
labs(title="Population, Atlanta 21-County MSA: 2019") +
mapTheme, ncol=2)
library(tidyverse)
library(sf)
library(raster)
library(knitr)
library(kableExtra)
library(tidycensus)
library(tigris)
library(FNN)
library(caret)
library(yardstick)
library(pscl)
library(plotROC)
library(ggrepel)
library(pROC)
library(grid)
library(gridExtra)
library(viridis)
library(igraph)
#this function converts a column in to quintiles. It is used for mapping.
quintileBreaks <- function(df,variable) {
as.character(quantile(df[[variable]],
c(.01,.2,.4,.6,.8),na.rm=T))
}
#This function can be used to convert a polygon sf to centroids xy coords.
xyC <- function(aPolygonSF) {
as.data.frame(
cbind(x=st_coordinates(st_centroid(aPolygonSF))[,1],
y=st_coordinates(st_centroid(aPolygonSF))[,2]))
}
#this function convert a raster to a data frame so it can be plotted in ggplot
rast <- function(inRaster) {
data.frame(
xyFromCell(inRaster, 1:ncell(inRaster)),
value = getValues(inRaster)) }
grid.arrange(
ggplot() +
geom_sf(data = Pop09, aes(fill=factor(ntile(estimate,5))), colour=NA) +
scale_fill_manual(values = palette5,
labels=quintileBreaks(Pop09,"pop_2009"),
name="Quintile\nBreaks") +
labs(title="Population, Atlanta 21-County MSA: 2009") +
mapTheme,
ggplot() +
geom_sf(data = Pop19, aes(fill=factor(ntile(estimate,5))), colour=NA) +
scale_fill_manual(values = palette5,
labels=quintileBreaks(Pop19,"pop_2019"),
name="Quintile\nBreaks") +
labs(title="Population, Atlanta 21-County MSA: 2019") +
mapTheme, ncol=2)
grid.arrange(
ggplot() +
geom_sf(data = Pop09, aes(fill=factor(ntile(estimate,5))), colour=NA) +
scale_fill_manual(values = palette5,
labels=quintileBreaks(Pop09,"pop_2009"),
name="Quintile\nBreaks") +
labs(title="Population, Atlanta 21-County MSA: 2009") +
mapTheme,
ggplot() +
geom_sf(data = Pop19, aes(fill=factor(ntile(estimate,5))), colour=NA) +
scale_fill_manual(values = palette5,
labels=quintileBreaks(Pop19,"pop_2019"),
name="Quintile\nBreaks") +
labs(title="Population, Atlanta 21-County MSA: 2019") +
mapTheme, ncol=2)
grid.arrange(
ggplot() +
geom_sf(data = Pop09, aes(fill=factor(ntile(estimate,5))), colour=NA) +
scale_fill_manual(values = palette5,
labels=quintileBreaks(Pop09,"pop_2009"),
name="Quintile\nBreaks") +
labs(title="Population, Atlanta 21-County MSA: 2009") +
mapTheme,
ggplot() +
geom_sf(data = Pop19, aes(fill=factor(ntile(estimate,5))), colour=NA) +
scale_fill_manual(values = palette5,
labels=quintileBreaks(Pop19,"pop_2019"),
name="Quintile\nBreaks") +
labs(title="Population, Atlanta 21-County MSA: 2019") +
mapTheme, ncol=2)
grid.arrange(
ggplot() +
geom_sf(data = Pop09, aes(fill=factor(ntile(estimate,5))), colour=NA) +
scale_fill_manual(values = palette5,
labels=quintileBreaks(Pop09,"pop_2009"),
name="Quintile\nBreaks") +
labs(title="2009 Population\nAtlanta 21-County MSA") +
mapTheme,
ggplot() +
geom_sf(data = Pop19, aes(fill=factor(ntile(estimate,5))), colour=NA) +
scale_fill_manual(values = palette5,
labels=quintileBreaks(Pop19,"pop_2019"),
name="Quintile\nBreaks") +
labs(title="2019 Population\nAtlanta 21-County MSA") +
mapTheme, ncol=2)
grid.arrange(
ggplot() +
geom_sf(data = Pop09, aes(fill=factor(ntile(estimate,5))), colour=NA) +
scale_fill_manual(values = palette5,
labels=quintileBreaks(Pop09,"estimate"),
name="Quintile\nBreaks") +
labs(title="2009 Population\nAtlanta 21-County MSA") +
mapTheme,
ggplot() +
geom_sf(data = Pop19, aes(fill=factor(ntile(estimate,5))), colour=NA) +
scale_fill_manual(values = palette5,
labels=quintileBreaks(Pop19,"estimate"),
name="Quintile\nBreaks") +
labs(title="2019 Population\nAtlanta 21-County MSA") +
mapTheme, ncol=2)
AtlantaMSA_fishnet <-
AtlantaMSA_fishnet %>%
rownames_to_column("fishnetID") %>%
mutate(fishnetID = as.numeric(fishnetID)) %>%
dplyr::select(fishnetID)
View(AtlantaMSA_fishnet)
View(Pop09)
#Pull 2009 population
Pop09 <-
get_acs(geography = "tract", variables = "B01003_001", year = 2009,
state = 13, geometry = TRUE,
county = Counties) %>%
rename("pop09" = estimate) %>%
st_transform(st_crs(AtlantaMSA_fishnet))
View(Pop09)
View(Pop09)
#Pull 2019 population
Pop19 <-
get_acs(geography = "tract", variables = "B01003_001", year = 2019,
state = 13, geometry = TRUE,
county = Counties) %>%
rename("pop19") %>%
st_transform(st_crs(AtlantaMSA_fishnet)) %>%
st_buffer(-1) #buffer the the tracts by -1ft. This is done because tidycensus appears to return geometries that are problematic when subjected to the area weighted interpolation function
#Pull 2019 population
Pop19 <-
get_acs(geography = "tract", variables = "B01003_001", year = 2019,
state = 13, geometry = TRUE,
county = Counties) %>%
rename("pop19" = estimate) %>%
st_transform(st_crs(AtlantaMSA_fishnet)) %>%
st_buffer(-1) #buffer the the tracts by -1ft. This is done because tidycensus appears to return geometries that are problematic when subjected to the area weighted interpolation function
grid.arrange(
ggplot() +
geom_sf(data = Pop09, aes(fill=factor(ntile(pop09,5))), colour=NA) +
scale_fill_manual(values = palette5,
labels=quintileBreaks(Pop09,"pop09"),
name="Quintile\nBreaks") +
labs(title="2009 Population\nAtlanta 21-County MSA") +
mapTheme,
ggplot() +
geom_sf(data = Pop19, aes(fill=factor(ntile(pop19,5))), colour=NA) +
scale_fill_manual(values = palette5,
labels=quintileBreaks(Pop19,"pop19"),
name="Quintile\nBreaks") +
labs(title="2019 Population\nAtlanta 21-County MSA") +
mapTheme, ncol=2)
fishnetPop09 <-
st_interpolate_aw(Pop09["pop09"], fishnetMSA_fishnet, extensive=TRUE) %>%
as.data.frame(.) %>%
rownames_to_column(var = "fishnetID") %>%
left_join(AtlantaMSA_fishnet %>%
mutate(fishnetID = as.character(fishnetID)),
., by=c("fishnetID"='fishnetID')) %>%
mutate(pop09 = replace_na(pop09,0)) %>%
dplyr::select(pop09)
fishnetPop09 <-
st_interpolate_aw(Pop09["pop09"], AtlantaMSA_fishnet, extensive=TRUE) %>%
as.data.frame(.) %>%
rownames_to_column(var = "fishnetID") %>%
left_join(AtlantaMSA_fishnet %>%
mutate(fishnetID = as.character(fishnetID)),
., by=c("fishnetID"='fishnetID')) %>%
mutate(pop09 = replace_na(pop09,0)) %>%
dplyr::select(pop09)
View(fishnetPop09)
fishnetPop19 <-
st_interpolate_aw(Pop19["pop19"], AtlantaMSA_fishnet, extensive=TRUE) %>%
as.data.frame(.) %>%
rownames_to_column(var = "fishnetID") %>%
left_join(AtlantaMSA_fishnet %>%
mutate(fishnetID = as.character(fishnetID)),
., by=c("fishnetID"='fishnetID')) %>%
mutate(pop19 = replace_na(pop19,0)) %>%
dplyr::select(pop19)
fishnetPop <-
cbind(fishnetPop09, fishnetPop19) %>%
dplyr::select(pop09,pop19) %>%
mutate(pop_Change = pop_2010 - pop_2000)
fishnetPop <-
cbind(fishnetPop09, fishnetPop19) %>%
dplyr::select(pop09,pop19) %>%
mutate(pop_Change = pop19 - pop09)
View(Pop19)
View(fishnetPop)
grid.arrange(
ggplot() +
geom_sf(data=Pop19, aes(fill=factor(ntile(pop19,5))),colour=NA) +
scale_fill_manual(values = palette5,
labels=substr(quintileBreaks(Pop19,"pop19"),1,4),
name="Quintile\nBreaks") +
labs(title="2019 Population\nAtlanta 21-County MSA",
subtitle="Represented as tracts; Boundaries omitted") +
mapTheme,
ggplot() +
geom_sf(data=fishnetPop, aes(fill=factor(ntile(pop19,5))), colour=NA) +
scale_fill_manual(values = palette5,
labels=substr(quintileBreaks(fishnetPop,"pop19"),1,4),
name="Quintile\nBreaks") +
labs(title="2019 Population\nAtlanta 21-County MSA",
subtitle="Represented as fishnet gridcells; Boundaries omitted") +
mapTheme, ncol=2)
AtlantaHighways <-
st_read("https://raw.githubusercontent.com/c-townsley/LUEM_A5_Repo/3799727ad2b4d67cf8a7b101629c00e463efcc00/Data/shapefile/AtlantaMetro_Major_Roads/Major_Roads.shp") %>%
st_transform(st_crs(metro_counties)) %>%
st_intersection(metro_counties)
AtlantaHighways <-
st_read("https://github.com/c-townsley/LUEM_A5_Repo/3799727ad2b4d67cf8a7b101629c00e463efcc00/Data/shapefile/AtlantaMetro_Major_Roads/Major_Roads.shp") %>%
st_transform(st_crs(metro_counties)) %>%
st_intersection(metro_counties)
AtlantaHighways <-
st_read("https://github.com/c-townsley/LUEM_A5_Repo/blob/3799727ad2b4d67cf8a7b101629c00e463efcc00/Data/shapefile/AtlantaMetro_Major_Roads/Major_Roads.shp") %>%
st_transform(st_crs(metro_counties)) %>%
st_intersection(metro_counties)
AtlantaHighways <-
st_read("https://github.com/c-townsley/LUEM_A5_Repo/3799727ad2b4d67cf8a7b101629c00e463efcc00/Data/shapefile/AtlantaMetro_Major_Roads/Major_Roads.shp") %>%
st_transform(st_crs(metro_counties)) %>%
st_intersection(metro_counties)
AtlantaHighways <-
st_read("https://github.com/c-townsley/LUEM_A5_Repo/blob/3799727ad2b4d67cf8a7b101629c00e463efcc00/Data/shapefile/AtlantaMetro_Major_Roads/Major_Roads.shp") %>%
st_transform(st_crs(metro_counties)) %>%
st_intersection(metro_counties)
AtlantaHighways <-
st_read("https://github.com/c-townsley/LUEM_A5_Repo/raw/3799727ad2b4d67cf8a7b101629c00e463efcc00/Data/shapefile/AtlantaMetro_Major_Roads/Major_Roads.shp") %>%
st_transform(st_crs(metro_counties)) %>%
st_intersection(metro_counties)
AtlantaHighways <-
st_read("https://github.com/c-townsley/LUEM_A5_Repo/raw/Data/shapefile/AtlantaMetro_Major_Roads/Major_Roads.shp") %>%
st_transform(st_crs(metro_counties)) %>%
st_intersection(metro_counties)
AtlantaHighways <-
st_read("https://github.com/c-townsley/LUEM_A5_Repo/Data/shapefile/AtlantaMetro_Major_Roads/Major_Roads.shp") %>%
st_transform(st_crs(metro_counties)) %>%
st_intersection(metro_counties)
AtlantaHighways <-
st_read("https://raw.githubusercontent.com/c-townsley/LUEM_A5_Repo/Data/shapefile/AtlantaMetro_Major_Roads/Major_Roads.shp") %>%
st_transform(st_crs(metro_counties)) %>%
st_intersection(metro_counties)
AtlantaHighways <-
st_read("https://raw.githubusercontent.com/c-townsley/LUEM_A5_Repo/main/Data/shapefile/AtlantaMetro_Major_Roads/Major_Roads.shp") %>%
st_transform(st_crs(metro_counties)) %>%
st_intersection(metro_counties)
AtlantaHighways <-
st_read("https://raw.githubusercontent.com/c-townsley/LUEM_A5_Repo/3799727ad2b4d67cf8a7b101629c00e463efcc00/Data/shapefile/AtlantaMetro_Major_Roads/Major_Roads.shp")
AtlantaHighways <-
st_read("https://raw.githubusercontent.com/c-townsley/LUEM_A5_Repo/3799727ad2b4d67cf8a7b101629c00e463efcc00/Data/shapefile/AtlantaMetro_Major_Roads/Major_Roads.shp")
st_read(metro_highways, append = FALSE, "C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN 675_Land Modeling/Assignments/A5_SprawlForecasting/LUEM_A5_Repo/Data/shapefile/AtlantaMetro_Major_Roads/
Major_Roads.shp")
st_read(metro_highways, append = FALSE, "C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN 675_Land Modeling/Assignments/A5_SprawlForecasting/LUEM_A5_Repo/Data/shapefile/AtlantaMetro_Major_Roads/Major_Roads.shp")
metro_highways <-
st_read("C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN 675_Land Modeling/Assignments/A5_SprawlForecasting/LUEM_A5_Repo/Data/shapefile/AtlantaMetro_Major_Roads/
Major_Roads.shp")
metro_highways <-
read_sf("C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN 675_Land Modeling/Assignments/A5_SprawlForecasting/LUEM_A5_Repo/Data/shapefile/AtlantaMetro_Major_Roads/
Major_Roads.shp")
read_sf
?read_sf
metro_highways <-
st_read("C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN 675_Land Modeling/Assignments/A5_SprawlForecasting/LUEM_A5_Repo/Data/shapefile/AtlantaMetro_Major_Roads/
Major_Roads.shp")
metro_highways <-
st_read(system.file("C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN 675_Land Modeling/Assignments/A5_SprawlForecasting/LUEM_A5_Repo/Data/shapefile/AtlantaMetro_Major_Roads/
Major_Roads.shp", package="sf"))
metro_highways <-
st_read("C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN 675_Land Modeling/Assignments/A5_SprawlForecasting/LUEM_A5_Repo/Data/shapefile/AtlantaMetro_Major_Roads/
Major_Roads.shp", package="sf")
metro_highways <-
st_read("C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN 675_Land Modeling/Assignments/A5_SprawlForecasting/LUEM_A5_Repo/Data/shapefile/AtlantaMetro_Major_Roads/
Major_Roads.shp")
metro_highways <-
st_read("C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN 675_Land Modeling/Assignments/A5_SprawlForecasting/LUEM_A5_Repo/Data/shapefile/AtlantaMetro_Major_Roads/
Major_Roads.shp")
metro_highways <- st_read("C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN 675_Land Modeling/Assignments/A5_SprawlForecasting/LUEM_A5_Repo/Data/shapefile/AtlantaMetro_Major_Roads/
Major_Roads.shp")
metro_highways <- st_read("C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN 675_Land Modeling/Assignments/A5_SprawlForecasting/LUEM_A5_Repo/Data/shapefile/AtlantaMetro_Major_Roads/Major_Roads.shp")
st_write(metro_highways, append = FALSE, "C:/Users/ctown/OneDrive - PennO365/Classes/Classes_Sem4_2023Spring/CPLN 675_Land Modeling/Assignments/A5_SprawlForecasting/LUEM_A5_Repo/Data/geojson/Major_Roads.geojson")
AtlantaHighways <-
st_read("https://raw.githubusercontent.com/c-townsley/LUEM_A5_Repo/8b689651286bb4ff28554095bd39ce1bd87655e4/Data/geojson/Major_Roads.geojson") %>%
st_transform(st_crs(metro_counties)) %>%
st_intersection(metro_counties)
ggplot() +
geom_sf(data=AtlantaHighways) +
geom_sf(data=metro_counties) +
labs(title = "Highways") +
mapTheme
ggplot() +
geom_sf(data=metro_counties) +
geom_sf(data=AtlantaHighways) +
labs(title = "Highways") +
mapTheme
View(metro_highways)
View(metro_highways)
table(metro_highways$FEATURE_TY)
AtlantaHighways <-
st_read("https://raw.githubusercontent.com/c-townsley/LUEM_A5_Repo/8b689651286bb4ff28554095bd39ce1bd87655e4/Data/geojson/Major_Roads.geojson") %>%
st_transform(st_crs(metro_counties)) %>%
st_intersection(metro_counties) %>%
filter(FEATURE_TY == "State Highway")
ggplot() +
geom_sf(data=metro_counties) +
geom_sf(data=AtlantaHighways) +
labs(title = "Highways") +
mapTheme
View(AtlantaHighways)
table(metro_highways$FEATURE_TY)
